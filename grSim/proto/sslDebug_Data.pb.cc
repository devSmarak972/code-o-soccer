// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sslDebug_Data.proto

#include "sslDebug_Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sslDebug_5fData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sslDebug_5fData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Debug_AdjustBall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sslDebug_5fData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Debug_AdjustBot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sslDebug_5fData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Debug_Circle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sslDebug_5fData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Debug_Line;
}  // namespace protobuf_sslDebug_5fData_2eproto
class sslDebug_DataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sslDebug_Data>
      _instance;
} _sslDebug_Data_default_instance_;
class Debug_CircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debug_Circle>
      _instance;
} _Debug_Circle_default_instance_;
class Debug_LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debug_Line>
      _instance;
} _Debug_Line_default_instance_;
class Debug_AdjustBotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debug_AdjustBot>
      _instance;
} _Debug_AdjustBot_default_instance_;
class Debug_AdjustBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debug_AdjustBall>
      _instance;
} _Debug_AdjustBall_default_instance_;
namespace protobuf_sslDebug_5fData_2eproto {
static void InitDefaultssslDebug_Data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_sslDebug_Data_default_instance_;
    new (ptr) ::sslDebug_Data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslDebug_Data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_sslDebug_Data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultssslDebug_Data}, {
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_Circle.base,
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_Line.base,
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_AdjustBot.base,
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_AdjustBall.base,}};

static void InitDefaultsDebug_Circle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Circle_default_instance_;
    new (ptr) ::Debug_Circle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Circle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Debug_Circle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebug_Circle}, {}};

static void InitDefaultsDebug_Line() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Line_default_instance_;
    new (ptr) ::Debug_Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Line::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Debug_Line =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebug_Line}, {}};

static void InitDefaultsDebug_AdjustBot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_AdjustBot_default_instance_;
    new (ptr) ::Debug_AdjustBot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_AdjustBot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Debug_AdjustBot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebug_AdjustBot}, {}};

static void InitDefaultsDebug_AdjustBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_AdjustBall_default_instance_;
    new (ptr) ::Debug_AdjustBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_AdjustBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Debug_AdjustBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebug_AdjustBall}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_sslDebug_Data.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Debug_Circle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Debug_Line.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Debug_AdjustBot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Debug_AdjustBall.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sslDebug_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sslDebug_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sslDebug_Data, circle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sslDebug_Data, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sslDebug_Data, botpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sslDebug_Data, ballpos_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Circle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Circle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Circle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Circle, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Circle, color_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, x1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, y1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, x2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, y2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_Line, color_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, vz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBot, team_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Debug_AdjustBall, vz_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::sslDebug_Data)},
  { 13, 22, sizeof(::Debug_Circle)},
  { 26, 36, sizeof(::Debug_Line)},
  { 41, 54, sizeof(::Debug_AdjustBot)},
  { 62, 72, sizeof(::Debug_AdjustBall)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_sslDebug_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Debug_Circle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Debug_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Debug_AdjustBot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Debug_AdjustBall_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sslDebug_Data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023sslDebug_Data.proto\"\217\001\n\rsslDebug_Data\022"
      "\035\n\006circle\030\001 \003(\0132\r.Debug_Circle\022\031\n\004line\030\002"
      " \003(\0132\013.Debug_Line\022 \n\006botpos\030\003 \003(\0132\020.Debu"
      "g_AdjustBot\022\"\n\007ballpos\030\004 \003(\0132\021.Debug_Adj"
      "ustBall\"C\n\014Debug_Circle\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030"
      "\002 \002(\r\022\016\n\006radius\030\003 \002(\r\022\r\n\005color\030\004 \002(\r\"K\n\n"
      "Debug_Line\022\n\n\002x1\030\001 \002(\r\022\n\n\002y1\030\002 \002(\r\022\n\n\002x2"
      "\030\003 \002(\r\022\n\n\002y2\030\004 \002(\r\022\r\n\005color\030\005 \002(\r\"r\n\017Deb"
      "ug_AdjustBot\022\n\n\002id\030\001 \002(\r\022\t\n\001x\030\002 \002(\005\022\t\n\001y"
      "\030\003 \002(\005\022\013\n\003dir\030\004 \002(\002\022\n\n\002vx\030\005 \002(\005\022\n\n\002vy\030\006 "
      "\002(\005\022\n\n\002vz\030\007 \002(\005\022\014\n\004team\030\010 \002(\r\"L\n\020Debug_A"
      "djustBall\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\n\n\002vx\030\003 "
      "\002(\005\022\n\n\002vy\030\004 \002(\005\022\n\n\002vz\030\005 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sslDebug_Data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sslDebug_5fData_2eproto

// ===================================================================

void sslDebug_Data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sslDebug_Data::kCircleFieldNumber;
const int sslDebug_Data::kLineFieldNumber;
const int sslDebug_Data::kBotposFieldNumber;
const int sslDebug_Data::kBallposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sslDebug_Data::sslDebug_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sslDebug_5fData_2eproto::scc_info_sslDebug_Data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sslDebug_Data)
}
sslDebug_Data::sslDebug_Data(const sslDebug_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      circle_(from.circle_),
      line_(from.line_),
      botpos_(from.botpos_),
      ballpos_(from.ballpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sslDebug_Data)
}

void sslDebug_Data::SharedCtor() {
}

sslDebug_Data::~sslDebug_Data() {
  // @@protoc_insertion_point(destructor:sslDebug_Data)
  SharedDtor();
}

void sslDebug_Data::SharedDtor() {
}

void sslDebug_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* sslDebug_Data::descriptor() {
  ::protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sslDebug_Data& sslDebug_Data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sslDebug_5fData_2eproto::scc_info_sslDebug_Data.base);
  return *internal_default_instance();
}


void sslDebug_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:sslDebug_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  circle_.Clear();
  line_.Clear();
  botpos_.Clear();
  ballpos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sslDebug_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sslDebug_Data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Debug_Circle circle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Debug_Line line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Debug_AdjustBot botpos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_botpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Debug_AdjustBall ballpos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ballpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sslDebug_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sslDebug_Data)
  return false;
#undef DO_
}

void sslDebug_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sslDebug_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Debug_Circle circle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->circle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->circle(static_cast<int>(i)),
      output);
  }

  // repeated .Debug_Line line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->line(static_cast<int>(i)),
      output);
  }

  // repeated .Debug_AdjustBot botpos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->botpos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->botpos(static_cast<int>(i)),
      output);
  }

  // repeated .Debug_AdjustBall ballpos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ballpos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ballpos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sslDebug_Data)
}

::google::protobuf::uint8* sslDebug_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sslDebug_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Debug_Circle circle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->circle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->circle(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Debug_Line line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->line(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Debug_AdjustBot botpos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->botpos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->botpos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Debug_AdjustBall ballpos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ballpos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ballpos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslDebug_Data)
  return target;
}

size_t sslDebug_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslDebug_Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Debug_Circle circle = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->circle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->circle(static_cast<int>(i)));
    }
  }

  // repeated .Debug_Line line = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->line(static_cast<int>(i)));
    }
  }

  // repeated .Debug_AdjustBot botpos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->botpos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->botpos(static_cast<int>(i)));
    }
  }

  // repeated .Debug_AdjustBall ballpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ballpos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ballpos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sslDebug_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslDebug_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const sslDebug_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sslDebug_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslDebug_Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslDebug_Data)
    MergeFrom(*source);
  }
}

void sslDebug_Data::MergeFrom(const sslDebug_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslDebug_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  circle_.MergeFrom(from.circle_);
  line_.MergeFrom(from.line_);
  botpos_.MergeFrom(from.botpos_);
  ballpos_.MergeFrom(from.ballpos_);
}

void sslDebug_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslDebug_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sslDebug_Data::CopyFrom(const sslDebug_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslDebug_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sslDebug_Data::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->circle())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->line())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->botpos())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ballpos())) return false;
  return true;
}

void sslDebug_Data::Swap(sslDebug_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sslDebug_Data::InternalSwap(sslDebug_Data* other) {
  using std::swap;
  CastToBase(&circle_)->InternalSwap(CastToBase(&other->circle_));
  CastToBase(&line_)->InternalSwap(CastToBase(&other->line_));
  CastToBase(&botpos_)->InternalSwap(CastToBase(&other->botpos_));
  CastToBase(&ballpos_)->InternalSwap(CastToBase(&other->ballpos_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata sslDebug_Data::GetMetadata() const {
  protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debug_Circle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Circle::kXFieldNumber;
const int Debug_Circle::kYFieldNumber;
const int Debug_Circle::kRadiusFieldNumber;
const int Debug_Circle::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Circle::Debug_Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_Circle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Circle)
}
Debug_Circle::Debug_Circle(const Debug_Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&x_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:Debug_Circle)
}

void Debug_Circle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&x_)) + sizeof(color_));
}

Debug_Circle::~Debug_Circle() {
  // @@protoc_insertion_point(destructor:Debug_Circle)
  SharedDtor();
}

void Debug_Circle::SharedDtor() {
}

void Debug_Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Debug_Circle::descriptor() {
  ::protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Circle& Debug_Circle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sslDebug_5fData_2eproto::scc_info_Debug_Circle.base);
  return *internal_default_instance();
}


void Debug_Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&x_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Circle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Circle)
  return false;
#undef DO_
}

void Debug_Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->radius(), output);
  }

  // required uint32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Circle)
}

::google::protobuf::uint8* Debug_Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->radius(), target);
  }

  // required uint32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Circle)
  return target;
}

size_t Debug_Circle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Circle)
  size_t total_size = 0;

  if (has_x()) {
    // required uint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  if (has_y()) {
    // required uint32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  if (has_radius()) {
    // required uint32 radius = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radius());
  }

  if (has_color()) {
    // required uint32 color = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  return total_size;
}
size_t Debug_Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Circle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());

    // required uint32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());

    // required uint32 radius = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radius());

    // required uint32 color = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Circle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Circle)
    MergeFrom(*source);
  }
}

void Debug_Circle::MergeFrom(const Debug_Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Circle::CopyFrom(const Debug_Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Debug_Circle::Swap(Debug_Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Circle::InternalSwap(Debug_Circle* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(radius_, other->radius_);
  swap(color_, other->color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Debug_Circle::GetMetadata() const {
  protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debug_Line::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Line::kX1FieldNumber;
const int Debug_Line::kY1FieldNumber;
const int Debug_Line::kX2FieldNumber;
const int Debug_Line::kY2FieldNumber;
const int Debug_Line::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Line::Debug_Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_Line.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Line)
}
Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:Debug_Line)
}

void Debug_Line::SharedCtor() {
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(color_));
}

Debug_Line::~Debug_Line() {
  // @@protoc_insertion_point(destructor:Debug_Line)
  SharedDtor();
}

void Debug_Line::SharedDtor() {
}

void Debug_Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  ::protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_Line& Debug_Line::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sslDebug_5fData_2eproto::scc_info_Debug_Line.base);
  return *internal_default_instance();
}


void Debug_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&x1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&x1_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Line)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 y1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 x2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_x2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 y2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_y2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Line)
  return false;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x1(), output);
  }

  // required uint32 y1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y1(), output);
  }

  // required uint32 x2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x2(), output);
  }

  // required uint32 y2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y2(), output);
  }

  // required uint32 color = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Line)
}

::google::protobuf::uint8* Debug_Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x1(), target);
  }

  // required uint32 y1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y1(), target);
  }

  // required uint32 x2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x2(), target);
  }

  // required uint32 y2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y2(), target);
  }

  // required uint32 color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Line)
  return target;
}

size_t Debug_Line::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Line)
  size_t total_size = 0;

  if (has_x1()) {
    // required uint32 x1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x1());
  }

  if (has_y1()) {
    // required uint32 y1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y1());
  }

  if (has_x2()) {
    // required uint32 x2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x2());
  }

  if (has_y2()) {
    // required uint32 y2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y2());
  }

  if (has_color()) {
    // required uint32 color = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  return total_size;
}
size_t Debug_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 x1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x1());

    // required uint32 y1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y1());

    // required uint32 x2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x2());

    // required uint32 y2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y2());

    // required uint32 color = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Line)
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x1_ = from.x1_;
    }
    if (cached_has_bits & 0x00000002u) {
      y1_ = from.y1_;
    }
    if (cached_has_bits & 0x00000004u) {
      x2_ = from.x2_;
    }
    if (cached_has_bits & 0x00000008u) {
      y2_ = from.y2_;
    }
    if (cached_has_bits & 0x00000010u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Line::InternalSwap(Debug_Line* other) {
  using std::swap;
  swap(x1_, other->x1_);
  swap(y1_, other->y1_);
  swap(x2_, other->x2_);
  swap(y2_, other->y2_);
  swap(color_, other->color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debug_AdjustBot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_AdjustBot::kIdFieldNumber;
const int Debug_AdjustBot::kXFieldNumber;
const int Debug_AdjustBot::kYFieldNumber;
const int Debug_AdjustBot::kDirFieldNumber;
const int Debug_AdjustBot::kVxFieldNumber;
const int Debug_AdjustBot::kVyFieldNumber;
const int Debug_AdjustBot::kVzFieldNumber;
const int Debug_AdjustBot::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_AdjustBot::Debug_AdjustBot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_AdjustBot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_AdjustBot)
}
Debug_AdjustBot::Debug_AdjustBot(const Debug_AdjustBot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&id_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:Debug_AdjustBot)
}

void Debug_AdjustBot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&id_)) + sizeof(team_));
}

Debug_AdjustBot::~Debug_AdjustBot() {
  // @@protoc_insertion_point(destructor:Debug_AdjustBot)
  SharedDtor();
}

void Debug_AdjustBot::SharedDtor() {
}

void Debug_AdjustBot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Debug_AdjustBot::descriptor() {
  ::protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_AdjustBot& Debug_AdjustBot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sslDebug_5fData_2eproto::scc_info_Debug_AdjustBot.base);
  return *internal_default_instance();
}


void Debug_AdjustBot::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_AdjustBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&id_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_AdjustBot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_AdjustBot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dir = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_dir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vz = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_vz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 team = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_AdjustBot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_AdjustBot)
  return false;
#undef DO_
}

void Debug_AdjustBot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_AdjustBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required float dir = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // required int32 vx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vx(), output);
  }

  // required int32 vy = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vy(), output);
  }

  // required int32 vz = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vz(), output);
  }

  // required uint32 team = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_AdjustBot)
}

::google::protobuf::uint8* Debug_AdjustBot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_AdjustBot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required float dir = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // required int32 vx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vx(), target);
  }

  // required int32 vy = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vy(), target);
  }

  // required int32 vz = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vz(), target);
  }

  // required uint32 team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_AdjustBot)
  return target;
}

size_t Debug_AdjustBot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_AdjustBot)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_dir()) {
    // required float dir = 4;
    total_size += 1 + 4;
  }

  if (has_vx()) {
    // required int32 vx = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());
  }

  if (has_vy()) {
    // required int32 vy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());
  }

  if (has_vz()) {
    // required int32 vz = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vz());
  }

  if (has_team()) {
    // required uint32 team = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team());
  }

  return total_size;
}
size_t Debug_AdjustBot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_AdjustBot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required float dir = 4;
    total_size += 1 + 4;

    // required int32 vx = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());

    // required int32 vy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());

    // required int32 vz = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vz());

    // required uint32 team = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_AdjustBot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_AdjustBot)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_AdjustBot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_AdjustBot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_AdjustBot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_AdjustBot)
    MergeFrom(*source);
  }
}

void Debug_AdjustBot::MergeFrom(const Debug_AdjustBot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_AdjustBot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000010u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000020u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000040u) {
      vz_ = from.vz_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_AdjustBot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_AdjustBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_AdjustBot::CopyFrom(const Debug_AdjustBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_AdjustBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_AdjustBot::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void Debug_AdjustBot::Swap(Debug_AdjustBot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_AdjustBot::InternalSwap(Debug_AdjustBot* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(dir_, other->dir_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vz_, other->vz_);
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Debug_AdjustBot::GetMetadata() const {
  protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debug_AdjustBall::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_AdjustBall::kXFieldNumber;
const int Debug_AdjustBall::kYFieldNumber;
const int Debug_AdjustBall::kVxFieldNumber;
const int Debug_AdjustBall::kVyFieldNumber;
const int Debug_AdjustBall::kVzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_AdjustBall::Debug_AdjustBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sslDebug_5fData_2eproto::scc_info_Debug_AdjustBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_AdjustBall)
}
Debug_AdjustBall::Debug_AdjustBall(const Debug_AdjustBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&x_)) + sizeof(vz_));
  // @@protoc_insertion_point(copy_constructor:Debug_AdjustBall)
}

void Debug_AdjustBall::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vz_));
}

Debug_AdjustBall::~Debug_AdjustBall() {
  // @@protoc_insertion_point(destructor:Debug_AdjustBall)
  SharedDtor();
}

void Debug_AdjustBall::SharedDtor() {
}

void Debug_AdjustBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Debug_AdjustBall::descriptor() {
  ::protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug_AdjustBall& Debug_AdjustBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sslDebug_5fData_2eproto::scc_info_Debug_AdjustBall.base);
  return *internal_default_instance();
}


void Debug_AdjustBall::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_AdjustBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vz_) -
        reinterpret_cast<char*>(&x_)) + sizeof(vz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_AdjustBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_AdjustBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_vz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_AdjustBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_AdjustBall)
  return false;
#undef DO_
}

void Debug_AdjustBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_AdjustBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 vx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vx(), output);
  }

  // required int32 vy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vy(), output);
  }

  // required int32 vz = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_AdjustBall)
}

::google::protobuf::uint8* Debug_AdjustBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_AdjustBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 vx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vx(), target);
  }

  // required int32 vy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vy(), target);
  }

  // required int32 vz = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_AdjustBall)
  return target;
}

size_t Debug_AdjustBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_AdjustBall)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_vx()) {
    // required int32 vx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());
  }

  if (has_vy()) {
    // required int32 vy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());
  }

  if (has_vz()) {
    // required int32 vz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vz());
  }

  return total_size;
}
size_t Debug_AdjustBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_AdjustBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 vx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());

    // required int32 vy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());

    // required int32 vz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vz());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_AdjustBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_AdjustBall)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_AdjustBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_AdjustBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_AdjustBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_AdjustBall)
    MergeFrom(*source);
  }
}

void Debug_AdjustBall::MergeFrom(const Debug_AdjustBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_AdjustBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000008u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000010u) {
      vz_ = from.vz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_AdjustBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_AdjustBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_AdjustBall::CopyFrom(const Debug_AdjustBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_AdjustBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_AdjustBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Debug_AdjustBall::Swap(Debug_AdjustBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_AdjustBall::InternalSwap(Debug_AdjustBall* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vz_, other->vz_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Debug_AdjustBall::GetMetadata() const {
  protobuf_sslDebug_5fData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sslDebug_5fData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sslDebug_Data* Arena::CreateMaybeMessage< ::sslDebug_Data >(Arena* arena) {
  return Arena::CreateInternal< ::sslDebug_Data >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Debug_Circle* Arena::CreateMaybeMessage< ::Debug_Circle >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Circle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Debug_Line* Arena::CreateMaybeMessage< ::Debug_Line >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Line >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Debug_AdjustBot* Arena::CreateMaybeMessage< ::Debug_AdjustBot >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_AdjustBot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Debug_AdjustBall* Arena::CreateMaybeMessage< ::Debug_AdjustBall >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_AdjustBall >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
